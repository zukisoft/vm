//-----------------------------------------------------------------------------
// Copyright (c) 2014 Michael G. Brehm
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//-----------------------------------------------------------------------------

import "wtypes.idl";
import "uapi.idl";

// Integral Data Types
//
typedef char							sys32_char_t;
typedef unsigned char					sys32_uchar_t;
typedef short							sys32_short_t;
typedef unsigned short					sys32_ushort_t;
typedef __int32							sys32_int_t;
typedef unsigned __int32				sys32_uint_t;
typedef __int32							sys32_long_t;
typedef unsigned __int32				sys32_ulong_t;
typedef __int64							sys32_longlong_t;
typedef unsigned __int64				sys32_ulonglong_t;

// Derived Data Types
//
typedef sys32_ulong_t					sys32_addr_t;
typedef sys32_uint_t					sys32_mode_t;
typedef sys32_long_t					sys32_off_t;
typedef sys32_longlong_t				sys32_loff_t;
typedef sys32_ulong_t					sys32_size_t;
typedef sys32_long_t					sys32_ssize_t;

// EPVID_SYSTEMCALLS32 {D967A755-869F-4180-A9C0-BA96D7B41E18}
//
// Defines the UUID to assign to the 32-bit system call entry point vector
cpp_quote("__declspec(selectany) extern uuid_t EPVID_SYSTEMCALLS32 = ")
cpp_quote("{ 0xd967a755, 0x869f, 0x4180, { 0xa9, 0xc0, 0xba, 0x96, 0xd7, 0xb4, 0x1e, 0x18 } };")

// sys32_startup_info
//
// Structure passed into the host process on startup
typedef struct _sys32_startup_info {

	// entry_point
	//
	// Address to jump into to begin execution
	sys32_addr_t	entry_point;

	// program_break
	//
	// Address of the initial program break
	sys32_addr_t	program_break;

	// stack_image
	//
	// Stack image loaded into the host process on startup
	sys32_addr_t	stack_image;
	sys32_size_t	stack_image_length;
	
} sys32_startup_info;

// Interface SystemCalls32
//
// Provides the 32-bit system calls interface for the virtual kernel instance.  Based on the
// function prototypes provided by the Linux kernel's include/linux/syscalls.h header file
[
	version(1.0),
	uuid(55DEB757-F4E0-4197-9116-3B8046594629),
	pointer_default(unique),
]

interface SystemCalls32
{
	// sys32_context_exclusive
	//
	// Exclusive (write) access context handle; use when the handle or the data that
	// the handle points to needs to be changed by an interface method
	typedef [context_handle] void* sys32_context_exclusive_t;

	// sys32_context
	//
	// Shared (read) access context handle; use when the handle or the data that
	// the handle points to does not need to be changed by an interface method
	typedef [context_handle] sys32_context_exclusive_t sys32_context_t;

	// sys32_acquire_context
	//
	// Allocates a new context handle and startup information for a child process
	HRESULT sys32_acquire_context([out, ref] sys32_startup_info* startinfo, [out, ref] sys32_context_exclusive_t* context);

	// sys32_release_context
	//
	// Releases a context handle previously allocated for a child process
	HRESULT sys32_release_context([in, out, ref] sys32_context_exclusive_t* context);

	// sys32_xxxxx
	//
	// Linux kernel system calls
	/* 003 */ sys32_long_t	sys32_read([in] sys32_context_t context, [in] sys32_int_t fd, [out, ref, size_is(count)] sys32_uchar_t* buf, [in] sys32_size_t count);
	/* 004 */ sys32_long_t	sys32_write([in] sys32_context_t context, [in] sys32_int_t fd, [in, ref, size_is(count)] const sys32_uchar_t* buf, [in] sys32_size_t count);
	/* 005 */ sys32_long_t	sys32_open([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [in] sys32_int_t flags, [in] sys32_mode_t mode);
	/* 006 */ sys32_long_t	sys32_close([in] sys32_context_t context, [in] sys32_int_t fd);
	/* 033 */ sys32_long_t	sys32_access([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode);
	/* 059 */ sys32_long_t	sys32_olduname([in] sys32_context_t context, [out, ref] linux_oldold_utsname* buf);
	/* 074 */ sys32_long_t	sys32_sethostname([in] sys32_context_t context, [in, ref, size_is(len)] sys32_char_t* name, [in] sys32_size_t len);
	/* 085 */ sys32_long_t	sys32_readlink([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [out, ref, size_is(bufsiz)] sys32_char_t* buf, [in] sys32_size_t bufsiz);
	/* 090 */ sys32_long_t	sys32_mmap([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length, [in] sys32_int_t prot, [in] sys32_int_t flags, [in] sys32_int_t fd, [in] sys32_off_t offset);
	/* 091 */ sys32_long_t	sys32_munmap([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length);
	/* 109 */ sys32_long_t	sys32_uname([in] sys32_context_t context, [out, ref] linux_old_utsname* buf);
	/* 121 */ sys32_long_t	sys32_setdomainname([in] sys32_context_t context, [in, ref, size_is(len)] sys32_char_t* name, [in] sys32_size_t len);
	/* 122 */ sys32_long_t	sys32_newuname([in] sys32_context_t context, [out, ref] linux_new_utsname* buf);
	/* 125 */ sys32_long_t	sys32_mprotect([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length, [in] sys32_int_t prot);
	/* 192 */ sys32_long_t	sys32_mmap_pgoff([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length, [in] sys32_int_t prot, [in] sys32_int_t flags, [in] sys32_int_t fd, [in] sys32_off_t pgoffset);
	/* 258 */ sys32_long_t	sys32_set_tid_address([in] sys32_context_t context, [in] sys32_addr_t tidptr);

///* 008 */	sys32_long_t	sys32_creat([in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode);
///* 045 */ sys32_long_t	sys32_brk([in] sys32_context_t context, [in] sys32_addr_t addr);
///* 295 */	sys32_long_t	sys32_openat([in] sys32_int_t fd, [in, string] const sys32_char_t* pathname, [in] sys32_int_t flags, [in] sys32_mode_t mode);
}
