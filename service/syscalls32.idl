//-----------------------------------------------------------------------------
// Copyright (c) 2015 Michael G. Brehm
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//-----------------------------------------------------------------------------

import "wtypes.idl";
import "uapi.idl";

// Integral Data Types
//
typedef char							sys32_char_t;
typedef unsigned char					sys32_uchar_t;
typedef short							sys32_short_t;
typedef unsigned short					sys32_ushort_t;
typedef __int32							sys32_int_t;
typedef unsigned __int32				sys32_uint_t;
typedef __int32							sys32_long_t;
typedef unsigned __int32				sys32_ulong_t;
typedef __int64							sys32_longlong_t;
typedef unsigned __int64				sys32_ulonglong_t;

// Derived Data Types
//
typedef sys32_ulong_t					sys32_addr_t;
typedef sys32_uint_t					sys32_dev_t;
typedef sys32_uint_t					sys32_mode_t;
typedef sys32_long_t					sys32_off_t;
typedef sys32_longlong_t				sys32_loff_t;
typedef sys32_int_t						sys32_pid_t;
typedef sys32_ulong_t					sys32_size_t;
typedef sys32_long_t					sys32_ssize_t;

// EPVID_SYSTEMCALLS32 {D967A755-869F-4180-A9C0-BA96D7B41E18}
//
// Defines the UUID to assign to the 32-bit system call entry point vector
cpp_quote("__declspec(selectany) extern uuid_t EPVID_SYSTEMCALLS32 = ")
cpp_quote("{ 0xd967a755, 0x869f, 0x4180, { 0xa9, 0xc0, 0xba, 0x96, 0xd7, 0xb4, 0x1e, 0x18 } };")

// sys32_iovec_t
//
// Version of iovec structure that can be marshalled by RPC
typedef struct _sys32_iovec {

	sys32_addr_t		iov_base;
	sys32_size_t		iov_len;

} sys32_iovec_t;

// sys32_sigaction_t
//
// Version of sigaction structure that can be marshalled by RPC
typedef struct _sys32_sigaction {

	sys32_addr_t		sa_handler;
	sys32_ulong_t		sa_flags;
	sys32_addr_t		sa_restorer;
	sys32_ulonglong_t	sa_mask;

} sys32_sigaction_t;

// sys32_stack_t
//
// Version of stack_t structure that can be marshalled by RPC
typedef struct _sys32_stack_t {

	sys32_addr_t		ss_sp;
	sys32_int_t			ss_flags;
	sys32_size_t		ss_size;

} sys32_stack_t;

// sys32_task_t
//
// Structure used to define a thread task
typedef struct _sys32_task_t {

	// Integer Registers
	sys32_ulong_t		eax;
	sys32_ulong_t		ebx;
	sys32_ulong_t		ecx;
	sys32_ulong_t		edx;
	sys32_ulong_t		edi;
	sys32_ulong_t		esi;

	// Control Registers
	sys32_addr_t		eip;
	sys32_addr_t		ebp;
	sys32_addr_t		esp;

	// Segment Registers
	sys32_ushort_t		gs;

} sys32_task_t;

// sys32_process_t
//
// Structure used to initialize a new process
typedef struct _sys32_process {

	// Local Descriptor Table
	sys32_addr_t		ldt;

	// Initial thread task
	sys32_task_t		task;

} sys32_process_t;

// sys32_sigset_t
//
// Represents the blocked signal bitmask for a thread
typedef linux_sigset_t		sys32_sigset_t;

// sys32_old_sigset_t
//
// Backwards-compatible blocked signal mask for a thread
typedef linux_old_sigset_t	sys32_old_sigset_t;

// Interface SystemCalls32
//
// Provides the 32-bit system calls interface for the virtual kernel instance
[
	version(1.0),
	uuid(55DEB757-F4E0-4197-9116-3B8046594629),
	pointer_default(unique),
]

interface SystemCalls32
{
	// sys32_context_exclusive_t
	//
	// Exclusive (write) access context handle; use when the handle or the data that
	// the handle points to needs to be changed by an interface method
	typedef [context_handle] void* sys32_context_exclusive_t;

	// sys32_context
	//
	// Shared (read) access context handle; use when the handle or the data that
	// the handle points to does not need to be changed by an interface method
	typedef [context_handle] sys32_context_exclusive_t sys32_context_t;


	// TODO: NEW WAY
	// don't pass in the PID, that's not secure -- continue to get from RPC
	HRESULT sys32_acquire_process([in] sys32_addr_t threadproc, [out, ref] sys32_process_t* process, [out, ref] sys32_context_exclusive_t* context);

	// don't pass in the PID, not secure
	HRESULT sys32_acquire_thread([in] sys32_uint_t tid, [out, ref] sys32_task_t* task, [out, ref] sys32_context_exclusive_t* context);

	// this will be the same, essentially
	//HRESULT sys32_release_context([in, out, ref] sys32_context_exclusive_t* context);

	// sys32_acquire_context (synchronous)
	//
	// Allocates a new context handle and startup information for a child process
	//HRESULT sys32_acquire_context([out, ref] sys32_task_state_t* taskstate, [out, ref] sys32_context_exclusive_t* context);

	// sys32_register_thread (synchronous)
	//
	// Invoked when a new thread is started in the process
	HRESULT sys32_register_thread([in] sys32_context_exclusive_t context, [in] sys32_uint_t nativetid, [out, ref] sys32_pid_t* tid);

	// sys32_release_context (synchronous)
	//
	// Releases a context handle previously allocated for a child process
	HRESULT sys32_release_context([in, out, ref] sys32_context_exclusive_t* context);

	// sys32_trace
	//
	// Sends a trace message back to the service from the host
	HRESULT sys32_trace([in] sys32_context_t context, [in, size_is(length)] sys32_char_t* message, [in] sys32_size_t length);

	// sys32_unregister_thread (synchronous)
	//
	// Invoked when a process thread is exiting
	HRESULT sys32_unregister_thread([in] sys32_context_exclusive_t context, [in] sys32_uint_t nativetid, [in] sys32_int_t exitcode);

	// sys32_xxxxx
	//
	// Linux kernel system calls
	// todo: should define which ones are non-standard or move/rename them (fork, clone, etc)
	// note: [out]-only pointers that might be NULL should be set to [in, out, unique]
	// todo: get rid of all the linux_ declarations, typedef them to sys32_ declarations
	/* 002 */ sys32_long_t	sys32_fork([in] sys32_context_t context, [in, ref] sys32_task_t* task);
	/* 003 */ sys32_long_t	sys32_read([in] sys32_context_t context, [in] sys32_int_t fd, [out, ref, size_is(count)] sys32_uchar_t* buf, [in] sys32_size_t count);
	/* 004 */ sys32_long_t	sys32_write([in] sys32_context_t context, [in] sys32_int_t fd, [in, ref, size_is(count)] const sys32_uchar_t* buf, [in] sys32_size_t count);
	/* 005 */ sys32_long_t	sys32_open([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [in] sys32_int_t flags, [in] sys32_mode_t mode);
	/* 006 */ sys32_long_t	sys32_close([in] sys32_context_t context, [in] sys32_int_t fd);
	/* 007 */ sys32_long_t	sys32_waitpid([in] sys32_context_t context, [in] sys32_pid_t pid, [in, out, unique] sys32_int_t* status, [in] sys32_int_t options);
	/* 008 */ sys32_long_t	sys32_creat([in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode);
	/* 014 */ sys32_long_t	sys32_mknod([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode, [in] sys32_dev_t device);
	/* 020 */ sys32_long_t	sys32_getpid([in] sys32_context_t context);
	/* 021 */ sys32_long_t	sys32_mount([in] sys32_context_t context, [in, string] const sys32_char_t* source, [in, string] const sys32_char_t* target, [in, string] const sys32_char_t* filesystem, [in] sys32_ulong_t flags, [in] sys32_addr_t data);
	/* 033 */ sys32_long_t	sys32_access([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode);
	/* 039 */ sys32_long_t	sys32_mkdir([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode);
	/* 045 */ sys32_long_t	sys32_brk([in] sys32_context_t context, [in] sys32_addr_t brk);
	/* 059 */ sys32_long_t	sys32_olduname([in] sys32_context_t context, [out, ref] linux_oldold_utsname* buf);
	/* 060 */ sys32_long_t	sys32_umask([in] sys32_context_t context, [in] sys32_mode_t mask);
	/* 064 */ sys32_long_t	sys32_getppid([in] sys32_context_t context);
	/* 074 */ sys32_long_t	sys32_sethostname([in] sys32_context_t context, [in, ref, size_is(len)] sys32_char_t* name, [in] sys32_size_t len);
	/* 085 */ sys32_long_t	sys32_readlink([in] sys32_context_t context, [in, string] const sys32_char_t* pathname, [out, ref, size_is(bufsiz)] sys32_char_t* buf, [in] sys32_size_t bufsiz);
	/* 090 */ sys32_long_t	sys32_old_mmap([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length, [in] sys32_int_t prot, [in] sys32_int_t flags, [in] sys32_int_t fd, [in] sys32_off_t offset);
	/* 091 */ sys32_long_t	sys32_munmap([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length);
	/* 099 */ sys32_long_t	sys32_statfs([in] sys32_context_t context, [in, string] const sys32_char_t* path, [out, ref] linux_statfs32* buf);
	/* 100 */ sys32_long_t	sys32_fstatfs([in] sys32_context_t context, [in] sys32_int_t fd, [out, ref] linux_statfs32* buf);
	/* 109 */ sys32_long_t	sys32_uname([in] sys32_context_t context, [out, ref] linux_old_utsname* buf);
	/* 114 */ sys32_long_t	sys32_wait4([in] sys32_context_t context, [in] sys32_pid_t pid, [in, out, unique] sys32_int_t* status, [in] sys32_int_t options, [in, out, unique] linux_rusage32* rusage);
	/* 120 */ sys32_long_t	sys32_clone([in] sys32_context_t context, [in, ref] sys32_task_t* task, [in] sys32_ulong_t clone_flags, [in] sys32_addr_t parent_tidptr, [in] sys32_addr_t child_tidptr, [in, out, unique] linux_user_desc32* tls_val);
	/* 121 */ sys32_long_t	sys32_setdomainname([in] sys32_context_t context, [in, ref, size_is(len)] sys32_char_t* name, [in] sys32_size_t len);
	/* 122 */ sys32_long_t	sys32_newuname([in] sys32_context_t context, [out, ref] linux_new_utsname* buf);
	/* 125 */ sys32_long_t	sys32_mprotect([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length, [in] sys32_int_t prot);
	/* 126 */ sys32_long_t	sys32_sigprocmask([in] sys32_context_t context, [in] sys32_int_t how, [in, unique] const sys32_old_sigset_t* newmask, [in, out, unique] sys32_old_sigset_t* oldmask);
	/* 146 */ sys32_long_t	sys32_writev([in] sys32_context_t context, [in] sys32_int_t fd, [in, size_is(iovcnt)] sys32_iovec_t* iov, [in] sys32_int_t iovcnt);
	/* 172 */ sys32_long_t	sys32_prctl([in] sys32_context_t context, [in] sys32_int_t option, [in] sys32_ulong_t arg2, [in] sys32_ulong_t arg3, [in] sys32_ulong_t arg4, [in] sys32_ulong_t arg5);
	/* 174 */ sys32_long_t	sys32_rt_sigaction([in] sys32_context_t context, [in] sys32_int_t signal, [in, unique] const sys32_sigaction_t* action, [in, out, unique] sys32_sigaction_t* oldaction, [in] sys32_size_t sigsetsize);
	/* 175 */ sys32_long_t	sys32_rt_sigprocmask([in] sys32_context_t context, [in] sys32_int_t how, [in, unique] const sys32_sigset_t* newmask, [in, out, unique] sys32_sigset_t* oldmask);
	/* 183 */ sys32_long_t	sys32_getcwd([in] sys32_context_t context, [out, ref, size_is(size)] sys32_char_t* buf, [in] sys32_ulong_t size);
	/* 186 */ sys32_long_t	sys32_sigaltstack([in] sys32_context_t context, [in, unique] const sys32_stack_t* newstack, [in, out, unique] sys32_stack_t* oldstack);
	/* 190 */ sys32_long_t	sys32_vfork([in] sys32_context_t context, [in, ref] sys32_task_t* task);
	/* 192 */ sys32_long_t	sys32_mmap([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length, [in] sys32_int_t prot, [in] sys32_int_t flags, [in] sys32_int_t fd, [in] sys32_off_t pgoffset);
	/* 195 */ sys32_long_t	sys32_stat64([in] sys32_context_t context, [in, string] const sys32_char_t* path, [out, ref] linux_stat3264* buf);
	/* 196 */ sys32_long_t	sys32_lstat64([in] sys32_context_t context, [in, string] const sys32_char_t* path, [out, ref] linux_stat3264* buf);
	/* 197 */ sys32_long_t	sys32_fstat64([in] sys32_context_t context, [in] sys32_int_t fd, [out, ref] linux_stat3264* buf);
	/* 199 */ sys32_long_t	sys32_getuid([in] sys32_context_t context);
	/* 200 */ sys32_long_t	sys32_getgid([in] sys32_context_t context);
	/* 219 */ sys32_long_t	sys32_madvise([in] sys32_context_t context, [in] sys32_addr_t addr, [in] sys32_size_t length, [in] sys32_int_t advice);
	/* 221 */ sys32_long_t	sys32_fcntl64([in] sys32_context_t context, [in] sys32_int_t fd, [in] sys32_int_t cmd, [in] sys32_addr_t arg);
	/* 243 */ sys32_long_t	sys32_set_thread_area([in] sys32_context_t context, [in, out, ref] linux_user_desc32* u_info);
	/* 258 */ sys32_long_t	sys32_set_tid_address([in] sys32_context_t context, [in] sys32_addr_t tidptr);
	/* 268 */ sys32_long_t	sys32_statfs64([in] sys32_context_t context, [in, string] const sys32_char_t* path, [in] sys32_size_t length, [out, ref] linux_statfs3264* buf);
	/* 269 */ sys32_long_t	sys32_fstatfs64([in] sys32_context_t context, [in] sys32_int_t fd, [in] sys32_size_t length, [out, ref] linux_statfs3264* buf);
	/* 270 */ sys32_long_t	sys32_tgkill([in] sys32_context_t context, [in] sys32_pid_t tgid, [in] sys32_pid_t pid, [in] sys32_int_t sig);
	/* 295 */ sys32_long_t	sys32_openat([in] sys32_context_t context, [in] sys32_int_t dirfd, [in, string] const sys32_char_t* pathname, [in] sys32_int_t flags, [in] sys32_mode_t mode);
	/* 296 */ sys32_long_t	sys32_mkdirat([in] sys32_context_t context, [in] sys32_int_t dirfd, [in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode);
	/* 297 */ sys32_long_t	sys32_mknodat([in] sys32_context_t context, [in] sys32_int_t dirfd, [in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode, [in] sys32_dev_t device);
	/* 300 */ sys32_long_t	sys32_fstatat64([in] sys32_context_t context, [in] sys32_int_t dirfd, [in, string] const sys32_char_t* pathname, [out, ref] linux_stat3264* buf, [in] sys32_int_t flags);
	/* 307 */ sys32_long_t	sys32_faccessat([in] sys32_context_t context, [in] sys32_int_t dirfd, [in, string] const sys32_char_t* pathname, [in] sys32_mode_t mode, [in] sys32_int_t flags);
}
