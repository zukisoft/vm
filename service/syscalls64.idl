//-----------------------------------------------------------------------------
// Copyright (c) 2014 Michael G. Brehm
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//-----------------------------------------------------------------------------

import "wtypes.idl";
import "uapi.idl";

// Integral Data Types
//
typedef char							sys64_char_t;
typedef unsigned char					sys64_uchar_t;
typedef short							sys64_short_t;
typedef unsigned short					sys64_ushort_t;
typedef __int32							sys64_int_t;
typedef unsigned __int32				sys64_uint_t;
typedef __int64							sys64_long_t;
typedef unsigned __int64				sys64_ulong_t;
typedef __int64							sys64_longlong_t;
typedef unsigned __int64				sys64_ulonglong_t;

// Derived Data Types
//
typedef sys64_ulong_t					sys64_addr_t;
typedef sys64_uint_t					sys64_mode_t;
typedef sys64_ulong_t					sys64_size_t;
typedef sys64_long_t					sys64_ssize_t;
typedef sys64_uint_t					sys64_sizeis_t;		// Special for 64-bit RPC calls

// EPVID_SYSTEMCALLS64 {94F810E2-56FE-4FAB-A0A6-2F631C807036}
//
// Defines the UUID to assign to the 64-bit system call entry point vector
cpp_quote("__declspec(selectany) extern uuid_t EPVID_SYSTEMCALLS64 = ")
cpp_quote("{ 0x94f810e2, 0x56fe, 0x4fab, { 0xa0, 0xa6, 0x2f, 0x63, 0x1c, 0x80, 0x70, 0x36 } };")

// sys64_startup_info
//
// Structure passed into the host process on startup
typedef struct _sys64_startup_info {

	// entry_point
	//
	// Address to jump into to begin execution
	sys64_addr_t	entry_point;

	// program_break
	//
	// Address of the initial program break
	sys64_addr_t	program_break;

	// stack_image
	//
	// Stack image loaded into the host process on startup
	sys64_addr_t	stack_image;
	sys64_size_t	stack_image_length;
	
} sys64_startup_info;

// Interface SystemCalls64
//
// Provides the 64-bit system calls interface for the virtual kernel instance.  Based on the
// function prototypes provided by the Linux kernel's include/linux/syscalls.h header file
[
	version(1.0),
	uuid(6D9FED46-1D04-41B3-AFEE-A68BD90C30EB),
	pointer_default(unique),
]

interface SystemCalls64
{
	// sys64_context_exclusive
	//
	// Exclusive (write) access context handle; use when the handle or the data that
	// the handle points to needs to be changed by an interface method
	typedef [context_handle] void* sys64_context_exclusive_t;

	// sys64_context
	//
	// Shared (read) access context handle; use when the handle or the data that
	// the handle points to does not need to be changed by an interface method
	typedef [context_handle] sys64_context_exclusive_t sys64_context_t;

	// sys64_acquire_context
	//
	// Allocates a new context handle and startup information for a child process
	HRESULT sys64_acquire_context([out, ref] sys64_startup_info* startinfo, [out, ref] sys64_context_exclusive_t* context);

	// sys64_release_context
	//
	// Releases a context handle previously allocated for a child process
	HRESULT sys64_release_context([in, out, ref] sys64_context_exclusive_t* context);

	// sys_xxxxx
	//
	// Linux kernel system calls
	/* 000 */ sys64_long_t	sys64_read([in] sys64_context_t context, [in] sys64_int_t fd, [out, ref, size_is(count)] sys64_uchar_t* buf, [in] sys64_sizeis_t count);
	/* 001 */ sys64_long_t	sys64_write([in] sys64_context_t context, [in] sys64_int_t fd, [in, ref, size_is(count)] const sys64_uchar_t* buf, [in] sys64_sizeis_t count);
	/* 002 */ sys64_long_t	sys64_open([in] sys64_context_t context, [in, string] const sys64_char_t* pathname, [in] sys64_int_t flags, [in] sys64_mode_t mode);
	/* 003 */ sys64_long_t	sys64_close([in] sys64_context_t context, [in] sys64_int_t fd);
	/* 063 */ sys64_long_t	sys64_newuname([in] sys64_context_t context, [out, ref] linux_new_utsname* buf);
	/* 089 */ sys64_long_t	sys64_readlink([in] sys64_context_t context, [in, string] const sys64_char_t* pathname, [out, ref, size_is(bufsiz)] sys64_char_t* buf, [in] sys64_sizeis_t bufsiz);
	/* 170 */ sys64_long_t	sys64_sethostname([in] sys64_context_t context, [in, ref, size_is(len)] sys64_char_t* name, [in] sys64_sizeis_t len);
	/* 171 */ sys64_long_t	sys64_setdomainname([in] sys64_context_t context, [in, ref, size_is(len)] sys64_char_t* name, [in] sys64_sizeis_t len);
	/* 218 */ sys64_long_t	sys64_set_tid_address([in] sys64_context_t context, [in] sys64_addr_t tidptr);

///* x */	sys64_long_t	sys64_creat([in, string] const sys64_char_t* pathname, [in] sys64_mode_t mode);
///* x */	sys64_long_t	sys64_openat([in] sys64_int_t fd, [in, string] const sys64_char_t* pathname, [in] sys64_int_t flags, [in] sys64_mode_t mode);
}
