//-----------------------------------------------------------------------------
// Copyright (c) 2014 Michael G. Brehm
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//-----------------------------------------------------------------------------

import "wtypes.idl";
import "linuxtypes.idl";

//-----------------------------------------------------------------------------
// Type Declarations

// charptr_t / wcharptr_t - [unique] character string pointers
//
typedef [string, unique] char*		charptr_t;
typedef [string, unique] wchar_t*	wcharptr_t;

// fshandle_t - filesystem node handle
//
typedef unsigned __int64			fshandle_t;

//-----------------------------------------------------------------------------
// fsobjecttype_t
//
// Enumeration that indicates the type of file system object returned as part
// of the fsobject_t structure

typedef [v1_enum] enum {

	FSOBJECT_PHYSICAL		= 1,			// Object is a physical resource

} fsobjecttype_t;

//-----------------------------------------------------------------------------
// fsobject_t
//
// Structure that describes a virtual file system object.  If the object is
// determined to be physical, no fshandle_t will be provided as the client 
// application is expected to handle the file operations directly

typedef struct {

	fshandle_t			fshandle;				// fshandle or zero if physical
	fsobjecttype_t		objecttype;

	[switch_is(objecttype)] union  {

		// physical
		//
		// Node that represents a physical file system object
		[case(FSOBJECT_PHYSICAL)] struct {

			wcharptr_t				ospath;

		} physical;
	};

} fsobject_t;

//-----------------------------------------------------------------------------
// Interface RemoteSystemCalls

[
	version(1.0),
	uuid(65AF53FB-CA7B-43DA-886E-A5F501FBACA9),
	pointer_default(unique),
	endpoint("ncalrpc:[vm.service.RemoteSystemCalls]"),
]

interface RemoteSystemCalls
{
	__int3264 rpc005_open		([in] charptr_t pathname, [in] int32_t flags, [in] linux_mode_t mode, [out, ref] fsobject_t* fsnode);
	__int3264 rpc006_close		([in] fshandle_t fshandle);
	__int3264 rpc010_unlink		([in] charptr_t pathname);

	__int3264 rpc014_mknod		([in] charptr_t pathname, [in] linux_mode_t mode, [in] linux_dev_t dev, [out] fshandle_t* fshandle);

	__int3264 rpc295_openat		([in] fshandle_t dirhandle, [in] charptr_t pathname, [in] int32_t flags, [in] linux_mode_t mode, [out] fshandle_t* fshandle);
	__int3264 rpc297_mknodat	([in] fshandle_t dirhandle, [in] charptr_t pathname, [in] linux_mode_t mode, [in] linux_dev_t dev, [out] fshandle_t* fshandle);
}

// RemoteSystemCalls endpoint constant
cpp_quote("#ifdef _UNICODE")
cpp_quote("#define ENDPOINT_REMOTESYSTEMCALLS reinterpret_cast<unsigned short*>(L\"vm.service.RemoteSystemCalls\")")
cpp_quote("#else")
cpp_quote("#define ENDPOINT_REMOTESYSTEMCALLS reinterpret_cast<unsigned char*>(\"vm.service.RemoteSystemCalls\")")
cpp_quote("#endif")

//---------------------------------------------------------------------------
